ALTER SESSION SET  NLS_DATE_FORMAT = 'DD.MM.YYYY HH24:MI:SS';

alter session set NLS_LANGUAGE='AMERICAN';

-- до подключения в pdb необходимо выполнить alter pluggable database MDAir open; 
SELECT name, open_mode
FROM v$pdbs;

alter pluggable database LDI_PDB open;

ALTER SESSION SET "_oracle_script" = TRUE

select * from dba_tablespaces;
select * from dba_users;

create tablespace MININGG2
datafile 'C:\BD\mining2.dbf'
size 20 m
autoextend on next 10 m
maxsize 200M
extent management local;
commit;
 
alter user system default tablespace MININGG2;
alter user system quota unlimited on MININGG2;
commit;


               ---------------------
               -- TABLES CREATION --
               ---------------------
               
create table Airport(
airport_id number GENERATED BY DEFAULT AS IDENTITY (START WITH 100 INCREMENT BY 1) primary key,
airport_name nvarchar2(60) not null,
location_country nvarchar2(40) not null,
location_city nvarchar2(40) not null
);

create table Plane(
plane_id number GENERATED BY DEFAULT AS IDENTITY (START WITH 1000 INCREMENT BY 1) primary key,
plane_model nvarchar2(20) not null,
places_capacity number(3) not null,
max_luggage_weigth number(4) not null
);

create table Position(
position_id number generated by default as identity(start with 1 maxvalue 100 increment by 1) primary key,
position_title nvarchar2(50) not null
);


create table Personel(
employee_id number generated by default as identity(start with 1 increment by 1) primary key,
employee_fname nvarchar2(50) not null,
employee_position number not null,
employee_mnth_salary number(10,2) not null,
employee_start_work date not null,
constraint fk_personel_position
foreign key (employee_position)
references Position (position_id)
);

select * from Personel;

create table Status(
status_id number generated by default as identity(start with 1 increment by 1) primary key,
    status_description nvarchar2(30)
);


create table Flight(
flight_number number GENERATED BY DEFAULT AS IDENTITY (START WITH 100 INCREMENT BY 1) primary key,
plane_id number references Plane(plane_id),
departure_airport_id number references Airport(airport_id) not null,
destination_airport_id number references Airport(airport_id) not null,
departure_datetime date not null,
arrive_datetime date not null,
available_seats number(3) not null,
status number references Status(status_id) not null 
);


create table Completed_flights(
flight_number number primary key,
plane_id number references Plane(plane_id),
departure_airport_id number references Airport(airport_id) not null,
destination_airport_id number references Airport(airport_id) not null,
departure_datetime date not null,
arrive_datetime date not null,
occupied_places_num number(3) not null,
result_luggage_weigth number(4) not null,
status references Status(status_id) not null 
);

create table Luggage(
luggage_id number GENERATED BY DEFAULT AS IDENTITY (START WITH 100 INCREMENT BY 1) primary key,
weigth number(3) not null
);
create table Ticket(
ticket_num number GENERATED BY DEFAULT AS IDENTITY (START WITH 100 INCREMENT BY 1) primary key,
flight_number number references Flight(flight_number) not null,
place_number number(3) not null,
price number(7,2) not null,
status_num number references Ticket_status(status_num) not null,
customer_id number references Customer(customer_id) not null,
luggage_id number references Luggage(luggage_id)
);


create table Ticket_status(
status_num number GENERATED BY DEFAULT AS IDENTITY (START WITH 100 INCREMENT BY 1) primary key,
status_description nvarchar2(20) not null
)


CREATE TABLE Customer ( 
  customer_id NUMBER GENERATED BY DEFAULT AS IDENTITY(START WITH 100 INCREMENT BY 1) PRIMARY KEY,
  full_name NVARCHAR2(100) NOT NULL,
  date_of_birth DATE NOT NULL,
  passport_series NVARCHAR2(10) not null unique
);


               ---------------------
               -- TABLES INSERT --
               ---------------------


INSERT INTO Airport (airport_name, location_country, location_city)
VALUES ('John F. Kennedy International Airport', 'United States', 'New York');

INSERT INTO Airport (airport_name, location_country, location_city)
VALUES ('Los Angeles International Airport', 'United States', 'Los Angeles');

INSERT INTO Airport (airport_name, location_country, location_city)
VALUES ('London Heathrow Airport', 'United Kingdom', 'London');

INSERT INTO Airport (airport_name, location_country, location_city)
VALUES ('Charles de Gaulle Airport', 'France', 'Paris');

INSERT INTO Airport (airport_name, location_country, location_city)
VALUES ('Frankfurt Airport', 'Germany', 'Frankfurt');

INSERT INTO Airport (airport_name, location_country, location_city)
VALUES ('Dubai International Airport', 'United Arab Emirates', 'Dubai');

INSERT INTO Airport (airport_name, location_country, location_city)
VALUES ('Hong Kong International Airport', 'China', 'Hong Kong');

INSERT INTO Airport (airport_name, location_country, location_city)
VALUES ('Tokyo International Airport', 'Japan', 'Tokyo');

INSERT INTO Airport (airport_name, location_country, location_city)
VALUES ('Sydney Kingsford Smith Airport', 'Australia', 'Sydney');

select * from Airport;
commit;




INSERT INTO Plane (plane_model, places_capacity, max_luggage_weigth)
VALUES ('Boeing 737', 200, 9500);

INSERT INTO Plane (plane_model, places_capacity, max_luggage_weigth)
VALUES ('Airbus A320', 180, 8000);

INSERT INTO Plane (plane_model, places_capacity, max_luggage_weigth)
VALUES ('Embraer E190', 100, 5000);

INSERT INTO Plane (plane_model, places_capacity, max_luggage_weigth)
VALUES ('Boeing 777', 400, 9900);

INSERT INTO Plane (plane_model, places_capacity, max_luggage_weigth)
VALUES ('Airbus A380', 550, 9950);

select * from Plane;
commit;





INSERT INTO Position (position_title)
VALUES ('Pilot');

INSERT INTO Position (position_title)
VALUES ('Co-Pilot');

INSERT INTO Position (position_title)
VALUES ('Flight Attendant');

INSERT INTO Position (position_title)
VALUES ('Flight Dispatcher');

INSERT INTO Position (position_title)
VALUES ('Aircraft Mechanic');

select * from Position;
commit;







INSERT INTO Personel (employee_fname, employee_position, employee_mnth_salary, employee_start_work)
VALUES ('Ivan Ivanov', 1, 3000.00, TO_DATE('19.01.2021', 'DD.MM.YYYY'));

INSERT INTO Personel (employee_fname, employee_position, employee_mnth_salary, employee_start_work)
VALUES ('Jahsei Onfroy', 2, 2400.50, TO_DATE('19.01.2021', 'DD.MM.YYYY'));


INSERT INTO Personel (employee_fname, employee_position, employee_mnth_salary, employee_start_work)
VALUES ('Scott Dunn', 4, 1900.00, TO_DATE('21.04.2021', 'DD.MM.YYYY'));

INSERT INTO Personel (employee_fname, employee_position, employee_mnth_salary, employee_start_work)
VALUES ('Joshua Curtis', 3, 1500.00, TO_DATE('01.03.2022', 'DD.MM.YYYY'));

INSERT INTO Personel (employee_fname, employee_position, employee_mnth_salary, employee_start_work)
VALUES ('George Mack', 5, 2800.00, TO_DATE('08.04.2022', 'DD.MM.YYYY'));

INSERT INTO Personel (employee_fname, employee_position, employee_mnth_salary, employee_start_work)
VALUES ('Monica Bennett', 2, 1900.50, TO_DATE('01.07.2022', 'DD.MM.YYYY'));

INSERT INTO Personel (employee_fname, employee_position, employee_mnth_salary, employee_start_work)
VALUES ('Nicole Allison', 3, 1600.00, TO_DATE('27.07-2022', 'DD.MM.YYYY'));

INSERT INTO Personel (employee_fname, employee_position, employee_mnth_salary, employee_start_work)
VALUES ('Michael Roy', 4, 2000.00, TO_DATE('01.09.2022','DD.MM.YYYY'));

INSERT INTO Personel (employee_fname, employee_position, employee_mnth_salary, employee_start_work)
VALUES ('Edward Sullivan', 5, 3800.00, TO_DATE('17.10.2022','DD.MM.YYYY'));

INSERT INTO Personel (employee_fname, employee_position, employee_mnth_salary, employee_start_work)
VALUES ('Erik Reed', 1, 3300.00, TO_DATE('02.11.2022','DD.MM.YYYY'));

INSERT INTO Personel (employee_fname, employee_position, employee_mnth_salary, employee_start_work)
VALUES ('Nicole Hahn', 2, 2400.50, TO_DATE('24.12.2022','DD.MM.YYYY'));

INSERT INTO Personel (employee_fname, employee_position, employee_mnth_salary, employee_start_work)
VALUES ('Billy Monroe', 1, 2487.00, TO_DATE('14.04.2023','DD.MM.YYYY'));

select * from Personel;
commit;



INSERT INTO Status(status_description)
values ('Scheduled');

INSERT INTO Status(status_description)
values ('Cancelled');

INSERT INTO Status(status_description)
values ('Completed');

INSERT INTO Status(status_description)
values ('Delayed');

INSERT INTO Status(status_description)
values ('Executing');

select * from Status;
commit;





insert into Customer(full_name, date_of_birth, passport_series)
values ('Gets Herman Albertovich', TO_DATE('17.03.2004', 'DD.MM.YYYY'), 'AB7658412');

select * from Customer;
commit;



insert into Ticket_status(status_description)
values('Booked');

insert into Ticket_status(status_description)
values('Refunded');

insert into Ticket_status(status_description)
values('Used');

select * from Ticket_status;
commit;


               ---------------------------------
               -- TRIGGERS CREATION AND CHECK --
               ---------------------------------
               
----------------------===              
-------------------- 1 ==
----------------------===
--creation
CREATE OR REPLACE TRIGGER update_available_seats
BEFORE INSERT ON Ticket
FOR EACH ROW
DECLARE
  v_available_seats number;
BEGIN
  SELECT available_seats
  INTO v_available_seats
  FROM Flight
  WHERE flight_number = :NEW.flight_number;
  
  IF v_available_seats <= 0 THEN
    RAISE_APPLICATION_ERROR(-20001, 'No available seats on this flight.');
  END IF;
  UPDATE Flight
  SET available_seats = (SELECT places_capacity FROM Plane WHERE plane_id = 
  (SELECT plane_id FROM Flight WHERE flight_number = :NEW.flight_number)) - 
  (SELECT COUNT(*) FROM Ticket WHERE flight_number = :NEW.flight_number and status_num = 100) - 1
  WHERE flight_number = :NEW.flight_number;
END;    


--check
select * from flight;
select * from ticket_status;

INSERT INTO Flight (
  plane_id, 
  departure_airport_id, 
  destination_airport_id, 
  departure_datetime, 
  arrive_datetime, 
  available_seats, 
  status
)
SELECT 
  1005, 
  107, 
  108, 
  TO_DATE('01.05.2022 13:45:00', 'DD.MM.YYYY HH24:MI:SS'),
  TO_DATE('01.05.2022 18:54:00', 'DD.MM.YYYY HH24:MI:SS'),
  p.places_capacity, 
  1
FROM plane p
WHERE p.plane_id = 1005;


--check
select * from Flight;
select * from Ticket;


insert into Ticket(flight_number, place_number, price, status_num, customer_id)
values (105, 28, 500, 100,100); --+ luggage_id 6-ым аргументом, если нужен бгаж, бронь билета с багажом будет вынесена в отдельную процедуру, но пока так

insert into Luggage(weigth)
values(90);
select * from luggage;

insert into Ticket(flight_number, place_number, price, status_num, customer_id, luggage_id)
values (105, 25, 500, 100,100,100);


select * from Ticket;
update ticket set status_num = 101 where ticket_num = 118;


select t.ticket_num, t.flight_number, t.place_number, t.price, ts.status_description
from Ticket t join Ticket_status ts on t.status_num =  ts.status_num
;
commit;

SET SERVEROUTPUT ON

----------------------===              
-------------------- 2 ==
----------------------===
--v1
--CREATE OR REPLACE TRIGGER increase_available_seats
--AFTER UPDATE OF status_num ON Ticket
--FOR EACH ROW
--BEGIN
-- IF :NEW.status_num = 101 THEN
--    UPDATE Flight
--    SET available_seats = available_seats + 1
--    WHERE flight_number = :NEW.flight_number;
--  END IF;
--END;


--v2
CREATE OR REPLACE TRIGGER increase_available_seats
AFTER UPDATE OF status_num ON Ticket
FOR EACH ROW
BEGIN
  IF :NEW.status_num = 101 AND :OLD.status_num != 101 THEN -- добавляем проверку на изменение статуса
    UPDATE Flight
    SET available_seats = LEAST(available_seats + 1, 
                                 (SELECT places_capacity FROM Plane WHERE plane_id = 
                                  (SELECT plane_id FROM Flight WHERE flight_number = :NEW.flight_number)))
    WHERE flight_number = :NEW.flight_number;
  END IF;
END;

--check
select * from Ticket;
select * from Flight;
select * from Customer;

select * from Ticket
where flight_number > 100 and status_num <> 101;

update Ticket set status_num = 101 where ticket_num = 156;

select * from  flight;
commit;

----------------------===              
-------------------- 3 ==
----------------------===
--проверка веса багажа
CREATE OR REPLACE TRIGGER lug_weigth_check
BEFORE INSERT ON Ticket
FOR EACH ROW
DECLARE
v_total_luggage_weight NUMBER;
v_max_luggage_weight NUMBER;
v_plane_id NUMBER;
BEGIN

SELECT NVL(SUM(l.weigth), 0)
INTO v_total_luggage_weight
FROM Ticket t JOIN Luggage l ON t.luggage_id = l.luggage_id
WHERE t.flight_number = :NEW.flight_number and t.status_num <> 101;

dbms_output.put_line('Luggage weighs ' || TO_CHAR(v_total_luggage_weight));

SELECT max_luggage_weigth, plane_id
INTO v_max_luggage_weight, v_plane_id
FROM Plane
WHERE plane_id = (SELECT plane_id FROM Flight WHERE flight_number = :NEW.flight_number);

IF v_total_luggage_weight + NVL(:NEW.luggage_id, 0) > v_max_luggage_weight THEN
RAISE_APPLICATION_ERROR(-20002, 'Total luggage weight is exceeding the limit.');
END IF;

END;


--проверка порядка выполнения триггеров
SELECT TRIGGER_NAME, TRIGGER_TYPE, TRIGGERING_EVENT, TABLE_NAME, TRIGGER_BODY
FROM USER_TRIGGERS
WHERE TABLE_NAME = 'TICKET'
ORDER BY TRIGGER_TYPE DESC, TRIGGERING_EVENT DESC, TRIGGER_NAME;

--check

insert into Luggage(weigth)
values(90);
select * from luggage;

insert into Ticket(flight_number, place_number, price, status_num, customer_id, luggage_id)
values (105, 21, 500, 101,100,100);
select * from Ticket;
select * from Flight;
select * from plane;

commit;


----------------------===              
-------------------- 4 ==
----------------------===

create or replace trigger Flight_status_check
after update of status on Flight
for each row
declare
  v_total_weight NUMBER;
  oc_seats NUMBER;
begin
SELECT COUNT(*)
into oc_seats
FROM Ticket
WHERE flight_number = :new.flight_number and status_num = 100;
  if :new.status in (2, 3) then
   SELECT SUM(l.weigth)
   into v_total_weight
FROM Luggage l
JOIN Ticket t ON l.luggage_id = t.luggage_id
WHERE t.flight_number = :new.flight_number;
 dbms_output.put_line(oc_seats);
  dbms_output.put_line(v_total_weight);
    insert into Completed_flights(flight_number, plane_id, departure_airport_id, destination_airport_id, 
                                   departure_datetime, arrive_datetime, occupied_places_num, result_luggage_weigth, status)
  values (:new.flight_number, :new.plane_id, :new.departure_airport_id, :new.destination_airport_id, 
           :new.departure_datetime, :new.arrive_datetime, oc_seats, v_total_weight, :new.status);
  end if;
end;

update Flight set status = 2 where flight_number = 87694;
select * from Completed_flights;
delete from Completed_flights;

exec CANCEL_FLIGHT(87694);



--check

select * from Completed_flights;
select * from flight
select * from ticket;
select * from plane;

update flight set status = 2 where flight_number = 105; 
update flight set status = 1 where flight_number = 105; 
select * from status;
select * from ticket_status;

commit;


update ticket set status_num = 101 where flight_number = 105;
select * from ticket;


----------------------------
-------------END OF TRIGGERS
----------------------------





                    ----------------------------------------------
                    -------------USERS,ROLES,PROFILES-------------
                    ----------------------------------------------
                    
CREATE PROFILE CLIENT_PROFILE limit
password_life_time unlimited
sessions_per_user 1000
FAILED_LOGIN_ATTEMPTS 5
PASSWORD_LOCK_TIME 1
PASSWORD_REUSE_TIME 10
PASSWORD_GRACE_TIME default
connect_time 180
idle_time 35;

select * from dba_profiles where profile = 'CLIENT_PROFILE';

create role CLIENT_ROLE;
grant create session to CLIENT_ROLE;

--далее надо будет выдать grant exrcute на отдельно взятые хранимые процедуры;
select * from dba_sys_privs where grantee = 'CLIENT_ROLE';
commit;

create user MDAIR_CLIENT identified by 7777777
profile CLIENT_PROFILE
account unlock;

grant CLIENT_ROLE to MDAIR_CLIENT;
commit;


------------------------------------
CREATE PROFILE MANAGER_PROFILE limit
password_life_time 90
sessions_per_user 3
FAILED_LOGIN_ATTEMPTS 3
PASSWORD_LOCK_TIME 2
PASSWORD_REUSE_TIME 10
PASSWORD_GRACE_TIME default
connect_time 240
idle_time 45;

create role MANAGER_ROLE;
grant create session to MANAGER_ROLE;
--далее надо будет выдать grant exrcute на отдельно взятые хранимые процедуры;
commit;

create user MDAIR_MANAGER identified by qazwsx909
PROFILE MANAGER_PROFILE
account unlock;

grant MANAGER_ROLE to MDAIR_MANAGER;
commit;


                ---------------------
                --------PROCEDURES---
                ---------------------

                --__________________________________--
                --________USER(В БОЛЬШИНСТВЕ)_______--
                --__________________________________--
--1        
--это общий вид запроса для вывода информации о рейсе
select f.flight_number, plane.plane_model, a1.location_city as "DEPARTURE_CITY", a1.airport_name AS "DEPARTURE_AIRPORT" ,
a2.location_city as "DESTINATION_CITY", a2.airport_name as "DESTINATION_AIRPORT",
TO_CHAR(f.departure_datetime, 'DD.MM.YY HH24:MI:SS') AS departure_datetime, 
TO_CHAR(f.arrive_datetime, 'DD.MM.YY HH24:MI:SS') AS arrive_datetime,
f.available_seats, s.status_description
from Flight f join Plane on plane.plane_id = f.plane_id
join Airport a1 on f.departure_airport_id = a1.airport_id
join Airport a2 on f.destination_airport_id = a2.airport_id
join Status s on f.status = s.status_id
where a1.location_city = 'Minsk'
and a2.location_city = 'Moscow'
--and TRUNC(f.departure_datetime) = TO_DATE('11.03.2024', 'DD.MM.YYYY')
order by departure_datetime asc;





CREATE OR REPLACE PROCEDURE SEARCH_FLIGHTS(
departure_city nvarchar2,
destination_city nvarchar2,
dep_date date,
p_resflights OUT SYS_REFCURSOR
)
AS
BEGIN
open p_resflights for 
select f.flight_number, plane.plane_model, a1.location_city as "DEPARTURE_CITY", a1.airport_name AS "DEPARTURE_AIRPORT" ,
a2.location_city as "DESTINATION_CITY", a2.airport_name as "DESTINATION_AIRPORT",
TO_CHAR(f.departure_datetime, 'DD.MM.YYYY HH24:MI:SS') AS departure_datetime, 
TO_CHAR(f.arrive_datetime, 'DD.MM.YYYY HH24:MI:SS') AS arrive_datetime,
f.available_seats, s.status_description
from Flight f join Plane on plane.plane_id = f.plane_id
join Airport a1 on f.departure_airport_id = a1.airport_id
join Airport a2 on f.destination_airport_id = a2.airport_id
join Status s on f.status = s.status_id
where a1.location_city = departure_city
and a2.location_city = destination_city
and TRUNC(f.departure_datetime) = dep_date
order by departure_datetime asc;
END;


--check
VAR v_flights REFCURSOR;
EXEC SYSTEM.SEARCH_FLIGHTS('Minsk','Moscow',TO_DATE('20.11.2024', 'DD.MM.YYYY'),:v_flights);
PRINT v_flights;

SELECT *
FROM user_ind_columns 
WHERE table_name = 'FLIGHT';
 

update flight set status = 1 where flight_number =  87694;


select * from Airport;


--2 бронь билета

select * from ticket;
select * from ticket_status;
select * from luggage;

CREATE OR REPLACE PROCEDURE BookTicket (
  flight_num IN NUMBER,
  customer_id IN NUMBER,
  luggage_weight IN NUMBER DEFAULT NULL
)
AS
  luggage_id NUMBER;
  place_num NUMBER;
  price NUMBER;
BEGIN
  IF luggage_weight IS NOT NULL THEN
    INSERT INTO Luggage(weigth)
    VALUES (luggage_weight);
    SELECT MAX(luggage_id) INTO luggage_id FROM Luggage;
  END IF;

  SELECT COALESCE(MAX(place_number), 0) + 1
  INTO place_num
  FROM Ticket
  WHERE flight_number = flight_num;

  price := ROUND(DBMS_RANDOM.VALUE(400, 1000), 0);

  INSERT INTO Ticket(flight_number, place_number, price, status_num, customer_id, luggage_id)
  VALUES (flight_num, place_num, price, 100, customer_id, luggage_id);
END;


--check
select * from flight;
update flight set status = 1 where flight_number = 105; 
select * from ticket;


BEGIN
  BookTicket(87694, 100, NULL); -- Пример вызова для бронирования билета на рейс с номером 100, для покупателя с ID 101, с багажом весом 20 кг
END;

select * from ticket;
select * from flight where flight_number = 87694;
select * from plane where plane_id = 1040;


select * from luggage;
insert into luggage(weigth)
values (33);
select * from ticket_status;


--3 просмотр билетов пользователя 
CREATE OR REPLACE PROCEDURE GET_TICKETS_BY_CUSTOMER(
    p_customer_id IN NUMBER,
    p_tickets OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_tickets FOR
    SELECT t.ticket_num, t.flight_number, t.place_number, t.price, t.customer_id, ts.status_description
    FROM Ticket t inner join ticket_status ts on t.status_num = ts.status_num
    WHERE t.customer_id = p_customer_id;
END;

--check
VAR v_tickets REFCURSOR;
EXEC GET_TICKETS_BY_CUSTOMER(100, :v_tickets);
PRINT v_tickets;


  
--4 отмена билета
CREATE OR REPLACE PROCEDURE CANCEL_TICKET(
    p_ticket_num IN NUMBER,
    p_customer_id IN NUMBER
) AS
BEGIN
    UPDATE Ticket
    SET status_num = 101
    WHERE ticket_num = p_ticket_num AND customer_id = p_customer_id;
    
    COMMIT;
END;

--check
select * from customer;


exec CANCEL_TICKET(202,100);
select * from flight where flight_number = 87694;


grant execute on SEARCH_FLIGHTS to CLIENT_ROLE;
grant execute on BookTicket to CLIENT_ROLE;
grant execute on GET_TICKETS_BY_CUSTOMER to CLIENT_ROLE;
grant execute on CANCEL_TICKET to CLIENT_ROLE;
commit;


                --__________________________________--
                --________MANAGER(В БОЛЬШИНСТВЕ)_______--
                --__________________________________--
                
--1
CREATE OR REPLACE PROCEDURE CANCEL_FLIGHT (
    p_flight_num NUMBER
) AS
    v_status NUMBER;
BEGIN
    -- Получаем статус рейса
    SELECT status INTO v_status FROM flight WHERE flight_number = p_flight_num;
    -- Проверяем статус рейса и выбрасываем исключение при несоответствии
    IF v_status <> 1 THEN
        RAISE_APPLICATION_ERROR(-20009, 'Flight is not on "scheduled" status, it cannot be cancelled');
    END IF;
    -- Обновляем статус рейса и билетов
    UPDATE flight SET status = 2 WHERE flight_number = p_flight_num;
    UPDATE ticket SET status_num = 101 WHERE flight_number = p_flight_num AND status_num <> 101;
    
    COMMIT;
END;

select * from flight;

exec CANCEL_FLIGHT(87694);
select * from ticket;


--2
select * from status;

select * from completed_flights;
select TO_CHAR(sysdate, 'DD.MM.YYYY HH24:MI:SS') from dual;

CREATE OR REPLACE PROCEDURE CHECK_FLIGHTS AS
BEGIN
    UPDATE Flight
    SET status = 
        CASE 
            WHEN departure_datetime > SYSDATE AND SYSDATE < arrive_datetime THEN 5 -- "Executing"
            WHEN SYSDATE >= arrive_datetime THEN 3 -- "Completed"
        END
    WHERE status = 1; -- check only for scheduled flights
END;


--3
select * from plane;

create or replace procedure ADD_PLANE(
p_plane_model nvarchar2,
p_pacles_capacity number,
max_luggage_weigth number
)
as
begin
insert into Plane(PLANE_MODEL, PLACES_CAPACITY, MAX_LUGGAGE_WEIGTH)
values (p_plane_model,p_pacles_capacity,max_luggage_weigth);
commit;
end;

execute ADD_PLANE('Boeing 747', 320, 9990);



--4
select * from personel;

create or replace procedure ADD_EMPLOYEE(
p_empl_fname nvarchar2,
p_empl_position number,
p_salary number,
p_start_work_date date
)
as
begin
insert into Personel(employee_fname,employee_position, employee_mnth_salary,employee_start_work) 
values(p_empl_fname,p_empl_position,p_salary,p_start_work_date);
commit;
end;


exec system.ADD_EMPLOYEE('Pavel Arts', 1, 322, TO_DATE('02.05.2023', 'DD.MM.YYYY'));
select * from system.Personel;

--5
CREATE OR REPLACE PROCEDURE REMOVE_EMPLOYEE(
  p_empl_id NUMBER
) AS
  v_exists NUMBER;
BEGIN
  SELECT COUNT(*) INTO v_exists FROM Personel WHERE employee_id = p_empl_id;

  IF v_exists > 0 THEN
    DELETE FROM Personel WHERE employee_id = p_empl_id;
    COMMIT;
  ELSE
    RAISE_APPLICATION_ERROR(-20001, 'No such employee');
  END IF;
END;


exec REMOVE_EMPLOYEE(21);

--6
select * from Airport;

create or replace procedure ADD_AIRPORT(
p_airport_name nvarchar2,
p_location_country nvarchar2,
p_location_city nvarchar2
)
as
begin
insert into AIRPORT(airport_name, location_country, location_city)
values(p_airport_name,p_location_country,p_location_city);
commit;
end;

exec ADD_AIRPORT('Chopin National Airport', 'Poland', 'Warsaw');

commit;

--7
select * from flight;
select * from plane;
select * from airport;
select * from status;

create or replace procedure ADD_FLIGHT(
p_plane_id number,
p_dep_airport_id number,
p_dest_airport_id number,
p_dep_datetime date,
p_dest_datetime date
)
as
av_seats NUMBER;
BEGIN
select places_capacity 
into av_seats
from plane
where plane_id = p_plane_id;
insert into Flight(plane_id, departure_airport_id, destination_airport_id, departure_datetime, arrive_datetime, available_seats,status)
values(p_plane_id, p_dep_airport_id, p_dest_airport_id, p_dep_datetime, p_dest_datetime, av_seats, 1);
commit;
END;

exec ADD_FLIGHT(1020, 102, 105 ,TO_DATE('12.06.2023 10:00:00', 'DD.MM.YYYY HH24:MI:SS'),TO_DATE('12.06.2023 20:15:00', 'DD.MM.YYYY HH24:MI:SS'));
select * from flight;
commit;


grant execute on CANCEL_FLIGHT to MANAGER_ROLE;
grant execute on CHECK_FLIGHTS to MANAGER_ROLE;
grant execute on ADD_PLANE to MANAGER_ROLE;
grant execute on ADD_EMPLOYEE to MANAGER_ROLE;
grant execute on REMOVE_EMPLOYEE to MANAGER_ROLE;
grant execute on ADD_AIRPORT to MANAGER_ROLE;
grant execute on ADD_FLIGHT to MANAGER_ROLE;
grant execute on GET_TICKETS_BY_CUSTOMER to MANAGER_ROLE;
grant execute on SEARCH_FLIGHTS to MANAGER_ROLE;


grant select on Airport to MANAGER_ROLE;
grant select on Plane to MANAGER_ROLE;
grant select on Position to MANAGER_ROLE;
grant select on Personel to MANAGER_ROLE;
grant select on Status to MANAGER_ROLE;
grant select on Flight to MANAGER_ROLE;
grant select on Completed_flights to MANAGER_ROLE;
grant select on Luggage to MANAGER_ROLE;
grant select on Ticket to MANAGER_ROLE;
grant select on Ticket_status to MANAGER_ROLE;
grant select on Customer to MANAGER_ROLE;

commit;


--8
select * from customer;


create or replace procedure ADD_CUSTOMER(
p_cust_fullname nvarchar2,
p_birth_date date,
p_passport_series nvarchar2
)
as
begin
insert into customer(full_name, date_of_birth, passport_series)
values(p_cust_fullname, p_birth_date, p_passport_series);
commit;
end;

execute ADD_CUSTOMER('Dvoryaninkeen Maxim Genndevich', TO_DATE('24.09.2003', 'DD.MM.YYYY'),'MP8887766');
commit;

grant execute on ADD_CUSTOMER to MDAIR_MANAGER;


--9 and 10 XML TO
create DIRECTORY DATA_DIR2 as 'C:\BD\EXPIMP';
SELECT * FROM all_directories WHERE directory_name = 'DATA_DIR';
SELECT * FROM user_tab_privs WHERE table_name = 'DATA_DIR';
GRANT READ, WRITE ON DIRECTORY DATA_DIR2 TO MDAIR_MANAGER;




select * from airport;

CREATE OR REPLACE PROCEDURE IMPORT_TABLES_XML AS
  v_file UTL_FILE.FILE_TYPE;
  v_line VARCHAR2(32766);
  v_airport_name nvarchar2(40);
  v_location_country nvarchar2(40);
  v_location_city nvarchar2(40);
BEGIN
  -- Открываем файл для чтения
  v_file := UTL_FILE.FOPEN('DATA_DIR2', 'exported_data.xml', 'r', 32766);

  -- Читаем строки из файла
  LOOP
    BEGIN
      UTL_FILE.GET_LINE(v_file, v_line);
      IF v_line = '<Airport>' THEN
        -- Начало записи аэропорта
        v_airport_name := NULL;
        v_location_country := NULL;
        v_location_city := NULL;
      ELSIF v_line LIKE '<name>%' THEN
        -- Чтение названия аэропорта
        v_airport_name := SUBSTR(v_line, 7, LENGTH(v_line) - 13);
      ELSIF v_line LIKE '<country>%' THEN
        -- Чтение страны аэропорта
        v_location_country := SUBSTR(v_line, 10, LENGTH(v_line) - 19);
      ELSIF v_line LIKE '<city>%' THEN
        -- Чтение города аэропорта
        v_location_city := SUBSTR(v_line, 7, LENGTH(v_line) - 13);
      ELSIF v_line = '</Airport>' THEN
        -- Конец записи аэропорта, сохраняем в базу данных
        INSERT INTO Airport (airport_name, location_country, location_city)
        VALUES (v_airport_name, v_location_country, v_location_city);
      END IF;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        -- Конец файла, выходим из цикла
        EXIT;
    END;
  END LOOP;

  UTL_FILE.FCLOSE(v_file);
END;

begin
IMPORT_TABLES_XML;
end;

select * from airport;
commit;

CREATE OR REPLACE PROCEDURE EXPORT_AIRPORT_XML
AS 
  v_clob CLOB;
  v_file UTL_FILE.FILE_TYPE;
BEGIN
  SELECT DBMS_XMLGEN.GETXML('SELECT * FROM AIRPORT') INTO v_clob FROM DUAL;
  v_file := UTL_FILE.FOPEN('DATA_DIR2', 'AIRPORT.xml', 'w');
  UTL_FILE.PUT(v_file, v_clob);
  UTL_FILE.FCLOSE(v_file);
END;

begin
system.EXPORT_AIRPORT_XML();
end;
            -----------------
            -----INDEXES-----
            -----------------
            
select * from ticket;

--1     
CREATE INDEX idx_ticket_customer
ON Ticket (customer_id);    


--2
CREATE INDEX idx_flight_search ON Flight (departure_datetime, departure_airport_id, destination_airport_id);


--3
drop index ind_double_date;

create index idx_double_date on Flight(departure_airport_id, destination_airport_id);
create index idx_datetime on Flight(departure_datetime);


select * from dba_indexes;



-- EXP TEST--
-------------
--по заданию КП одна из таблиц должна иметь 100000 строк, это будет таблица flight (рейсы), данная процедура insert_flights) обеспечивает заполнение

--проверка генерации случайного времени прибытия 
create or replace procedure time_test AS
 v_dep_datetime DATE;
  v_arr_datetime DATE;
  BEGIN
    v_dep_datetime := TO_DATE('01.01.2025 00:00:00', 'DD.MM.YYYY HH24:MI:SS') + DBMS_RANDOM.VALUE(0, 365);
        v_arr_datetime := v_dep_datetime + NUMTODSINTERVAL(DBMS_RANDOM.VALUE(180, 960), 'MINUTE');
         DBMS_OUTPUT.PUT_LINE(v_arr_datetime);
          DBMS_OUTPUT.PUT_LINE(v_dep_datetime);
 END;
 
 set serveroutput on;
 exec time_test;

CREATE OR REPLACE PROCEDURE insert_flights AS
  v_plane_id NUMBER;
  v_dep_airport_id NUMBER;
  v_dest_airport_id NUMBER;
  v_dep_datetime DATE;
  v_arr_datetime DATE;
  v_available_seats NUMBER;
  v_status_id NUMBER := 1;
BEGIN
  FOR dep_airport IN (SELECT airport_id, location_city FROM airport) LOOP
    FOR dest_airport IN (SELECT airport_id, location_city FROM airport) LOOP
      IF dep_airport.location_city != dest_airport.location_city THEN
        SELECT plane_id INTO v_plane_id FROM plane ORDER BY DBMS_RANDOM.VALUE FETCH FIRST 1 ROWS ONLY;
        v_dep_airport_id := dep_airport.airport_id;
        v_dest_airport_id := dest_airport.airport_id;
        v_dep_datetime := TO_DATE('10.08.2027 00:00:00', 'DD.MM.YYYY HH24:MI:SS') + DBMS_RANDOM.VALUE(0, 90);
        v_arr_datetime := v_dep_datetime + NUMTODSINTERVAL(DBMS_RANDOM.VALUE(180, 960), 'MINUTE');
        SELECT places_capacity into v_available_seats FROM plane WHERE plane_id = v_plane_id;
INSERT INTO flight(plane_id, departure_airport_id, destination_airport_id, departure_datetime, arrive_datetime, available_seats, status)
VALUES(v_plane_id, v_dep_airport_id, v_dest_airport_id, TO_DATE(v_dep_datetime, 'DD.MM.YYYY HH24:MI:SS'), 
TO_DATE(v_arr_datetime, 'DD.MM.YYYY HH24:MI:SS'), v_available_seats, v_status_id);
      END IF;
    END LOOP;
  END LOOP;
  COMMIT;
END;

exec insert_flights;
commit;
select MAX(arrive_datetime) from Flight;
delete from Flight;
select count(*) from Flight;

commit;


------------------------------------------------------
--NECESSARY PROCEDURES AFTER CREATION OF APPLICATION--
------------------------------------------------------

CREATE OR REPLACE PROCEDURE CheckUserByPassportSeries(
    pPassportSeries IN NVARCHAR2,
    pResult OUT NUMBER
)
AS
    vUserCount NUMBER;
BEGIN
    -- Проверяем, есть ли пользователь с указанной серией паспорта
    SELECT COUNT(*) INTO vUserCount
    FROM Customer
    WHERE passport_series = pPassportSeries;
    IF vUserCount > 0 THEN
        -- Пользователь с указанной серией паспорта существует
        -- Можно продолжить проверку пароля или выполнить другие действия
        pResult := 1;
    ELSE
        -- Пользователь с указанной серией паспорта не существует
        pResult := 0;
    END IF;
END;

select * from customer;

set serveroutput on;

DECLARE
    pResult NUMBER;
BEGIN
    System.CheckUserByPassportSeries('AB7658412',  pResult);
    
    -- Далее вы можете использовать значение pResult для принятия решений
    IF pResult = 1 THEN
        DBMS_OUTPUT.PUT_LINE('User exists');
    ELSE
        DBMS_OUTPUT.PUT_LINE('User not exists');
    END IF;
END;
/
grant execute on CheckUserByPassportSeries to MDAIR_MANAGER;


--1
CREATE OR REPLACE PROCEDURE GetUserInfoByPassportSeries(
    pPassportSeries IN NVARCHAR2,
    pCustomerId OUT NUMBER,
    pFullName OUT NVARCHAR2
)
AS
BEGIN
    SELECT customer_id, full_name
    INTO pCustomerId, pFullName
    FROM Customer
    WHERE passport_series = pPassportSeries;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        pCustomerId := NULL;
        pFullName := NULL;
END;

DECLARE
    vCustomerId NUMBER;
    vFullName NVARCHAR2(100);
BEGIN
    GetUserInfoByPassportSeries('AB7658412', vCustomerId, vFullName);
    
    IF vCustomerId IS NOT NULL THEN
        DBMS_OUTPUT.PUT_LINE('User ID: ' || vCustomerId);
        DBMS_OUTPUT.PUT_LINE('User full name: ' || vFullName);
    ELSE
        DBMS_OUTPUT.PUT_LINE('User not found');
    END IF;
END;
/
grant execute on GetUserInfoByPassportSeries to MDAIR_MANAGER;

select pr.employee_id, pr.employee_fname, ps.position_title, pr.employee_mnth_salary, employee_start_work
from system.Personel pr inner join system.Position ps on pr.employee_position = ps.position_id ;

select * from Customer;



-- showing...
--1
CREATE OR REPLACE PROCEDURE SHOW_PEROSNEL(
p_personel_list OUT SYS_REFCURSOR
)
AS
BEGIN
open p_personel_list for 
select pr.employee_id, pr.employee_fname, ps.position_title, pr.employee_mnth_salary, employee_start_work
from system.Personel pr inner join system.Position ps on pr.employee_position = ps.position_id ;
END;

VAR p_personel_list REFCURSOR;
EXEC SYSTEM.SHOW_PEROSNEL(:p_personel_list);
PRINT p_personel_list;


grant execute on SHOW_PEROSNEL to MANAGER_ROLE;

--2
CREATE OR REPLACE PROCEDURE SHOW_PLANE(
p_plane_list OUT SYS_REFCURSOR
)
AS
BEGIN
open p_plane_list for 
select * from Plane;
END;

VAR p_plane_list REFCURSOR;
EXEC SYSTEM.SHOW_PLANE(:p_plane_list);
PRINT p_plane_list;


grant execute on SHOW_PLANE to MDAIR_MANAGER;

--3
select * from Customer;

CREATE OR REPLACE PROCEDURE SHOW_CUSTOMER(
p_customer_list OUT SYS_REFCURSOR
)
AS
BEGIN
open p_customer_list for 
select * from Customer;
END;

VAR p_customer_list REFCURSOR;
EXEC SYSTEM.SHOW_CUSTOMER(:p_customer_list);
PRINT p_customer_list;


grant execute on SHOW_CUSTOMER to MDAIR_MANAGER;


--4
select * from completed_flights;

CREATE OR REPLACE PROCEDURE SHOW_COMPLETED_FLIGHTS(
p_compl_flight_list OUT SYS_REFCURSOR
)
AS
BEGIN
open p_compl_flight_list for 
select f.flight_number, plane.plane_model, a1.location_city as "DEPARTURE_CITY", a1.airport_name AS "DEPARTURE_AIRPORT" ,
a2.location_city as "DESTINATION_CITY", a2.airport_name as "DESTINATION_AIRPORT",
TO_CHAR(f.departure_datetime, 'DD.MM.YY HH24:MI:SS') AS departure_datetime, 
TO_CHAR(f.arrive_datetime, 'DD.MM.YY HH24:MI:SS') AS arrive_datetime,
f.occupied_places_num, s.status_description
from completed_flights f join Plane on plane.plane_id = f.plane_id
join Airport a1 on f.departure_airport_id = a1.airport_id
join Airport a2 on f.destination_airport_id = a2.airport_id
join Status s on f.status = s.status_id;
END;

VAR p_compl_flight_list REFCURSOR;
EXEC SYSTEM.SHOW_COMPLETED_FLIGHTS(:p_compl_flight_list);
PRINT p_compl_flight_list;


grant execute on SHOW_COMPLETED_FLIGHTS to MDAIR_MANAGER;

--5
CREATE OR REPLACE PROCEDURE SHOW_NEAREST_FLIGHTS(
p_nearest_flights_list OUT SYS_REFCURSOR
)
AS
BEGIN
open p_nearest_flights_list for 
select f.flight_number, plane.plane_model, a1.location_city as "DEPARTURE_CITY", a1.airport_name AS "DEPARTURE_AIRPORT" ,
a2.location_city as "DESTINATION_CITY", a2.airport_name as "DESTINATION_AIRPORT",
TO_CHAR(f.departure_datetime, 'DD.MM.YY HH24:MI:SS') AS departure_datetime, 
TO_CHAR(f.arrive_datetime, 'DD.MM.YY HH24:MI:SS') AS arrive_datetime,
f.available_seats, s.status_description
from Flight f join Plane on plane.plane_id = f.plane_id
join Airport a1 on f.departure_airport_id = a1.airport_id
join Airport a2 on f.destination_airport_id = a2.airport_id
join Status s on f.status = s.status_id
order by departure_datetime asc
fetch first 20 rows only;
END;

VAR p_nearest_flights_list REFCURSOR;
EXEC SYSTEM.SHOW_NEAREST_FLIGHTS(:p_nearest_flights_list);
PRINT p_nearest_flights_list;


grant execute on SHOW_NEAREST_FLIGHTS to MDAIR_MANAGER;

--6
select * from airport;

CREATE OR REPLACE PROCEDURE SHOW_AIRPORTS(
p_airports_list OUT SYS_REFCURSOR
)
AS
BEGIN
open p_airports_list for 
select * from airport;
END;

VAR p_airports_list REFCURSOR;
EXEC SYSTEM.SHOW_AIRPORTS(:p_airports_list);
PRINT p_airports_list;


grant execute on SHOW_AIRPORTS to MDAIR_MANAGER;








SELECT * FROM dba_tab_privs WHERE grantee = 'CLIENT_ROLE' AND privilege = 'EXECUTE';
SELECT * FROM dba_tab_privs WHERE grantee = 'MDAIR_MANAGER' AND privilege = 'EXECUTE';